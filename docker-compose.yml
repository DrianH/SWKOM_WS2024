services:
  springapp:
    container_name: springboot_container
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./uploads:/uploads  # Mount the uploads directory to persist files
    ports:
      - "8080:8080"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/mydatabase
      - SPRING_DATASOURCE_USERNAME=myuser
      - SPRING_DATASOURCE_PASSWORD=mypassword
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update  # Optional: Automatically update DB schema
      - SPRING_JPA_DATABASE-PLATFORM=org.hibernate.dialect.PostgreSQLDialect  # Dialect for PostgreSQL
    depends_on:
      - db
    networks:
      - spring-boot-network

  db:
    image: postgres:14
    container_name: postgres_container
    environment:
      POSTGRES_DB: mydatabase
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
    volumes:
      - pgdata:/var/lib/postgresql/data  # Persist PostgreSQL data
    networks:
      - spring-boot-network

  adminer:
    image: adminer:latest
    container_name: adminer_container
    ports:
      - 8081:8080  # Adminer will be accessible on http://localhost:8081
    depends_on:
      - db #aufpassen dass reihenfolge passt und adminer sicher nach db hochfaehrt
    networks:
      - spring-boot-network

  nginx:
    image: nginx:latest
    container_name: nginx_container
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf  # Mount the custom NGINX configuration file
      - ./frontend:/usr/share/nginx/html  # Mount the frontend directory to serve static files
    ports:
      - 80:80  # Expose port 80 for HTTP traffic
    depends_on:
      - springapp
    networks:
      - spring-boot-network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq_container
    ports:
      - "5672:5672"  # Port for RabbitMQ connections
      - "15672:15672"  # Port for RabbitMQ management UI
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    networks:
      - spring-boot-network

  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"  # MinIO console
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    networks:
      - spring-boot-network

networks:
  spring-boot-network:
    name: spring-boot-network
    external: true
volumes:
  pgdata: